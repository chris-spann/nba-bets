name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '22'

jobs:
  # Backend testing and validation
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nba_bets_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          uv sync --group dev

      - name: Run backend linting
        run: make lint-backend

      - name: Run type checking
        run: make type-check
        continue-on-error: true  # ty is pre-release, allow failures

      - name: Run YAML linting
        run: make check-yaml
        continue-on-error: true

      - name: Run JSON validation
        run: make check-json
        continue-on-error: true

      - name: Run backend tests with coverage
        run: make test-backend-coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nba_bets_test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/htmlcov/index.html
          flags: backend
          name: backend-coverage

  # Frontend testing and validation
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: make lint-frontend

      - name: Install markdownlint globally
        run: npm install -g markdownlint-cli

      - name: Run markdown linting
        run: make check-markdown
        continue-on-error: true

      - name: Run frontend tests with coverage
        run: make test-frontend-coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security and quality checks
  security-checks:
    name: Security & Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dev dependencies
        run: |
          cd backend
          uv sync --group dev

      - name: Install Node.js security tools
        run: npm install -g audit-ci

      - name: Run Python security checks
        run: |
          cd backend
          uv run bandit -r . -f json -o bandit-report.json || true
          uv run safety check --json || true
        continue-on-error: true

      - name: Run Node.js security audit
        run: |
          cd frontend
          npm audit --audit-level moderate
        continue-on-error: true

      - name: Basic security checks
        run: make check-security

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
        continue-on-error: true

  # Docker and deployment validation
  docker-checks:
    name: Docker Build & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      - name: Lint Dockerfiles
        run: make lint-docker

      - name: Build backend Docker image
        run: |
          docker build -t nba-bets-backend:test ./backend

      - name: Build frontend Docker image
        run: |
          docker build -t nba-bets-frontend:test ./frontend

      - name: Test Docker Compose build
        run: |
          docker compose build

  # Integration tests (optional, can be heavy)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-tests')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose up -d --build

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:5173; do sleep 5; done'

      - name: Run integration tests
        run: |
          # Add integration test commands here
          echo "Integration tests would run here"

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v

  # Pre-commit validation
  pre-commit-checks:
    name: Pre-commit Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          uv sync --group dev

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install global tools
        run: npm install -g markdownlint-cli

      - name: Run pre-commit on all files
        run: |
          cd backend
          uv run pre-commit run --all-files
        continue-on-error: true

  # Summary job that depends on all checks
  pr-checks-summary:
    name: PR Checks Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-checks, docker-checks, pre-commit-checks]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
            echo "Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
            echo "Frontend tests failed"
            exit 1
          fi
          if [[ "${{ needs.docker-checks.result }}" != "success" ]]; then
            echo "Docker checks failed"
            exit 1
          fi
          echo "All required checks passed!"

      - name: Add PR comment
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: actions/github-script@v7
        with:
          script: |
            const status = "${{ needs.backend-tests.result }}" === "success" &&
                          "${{ needs.frontend-tests.result }}" === "success" &&
                          "${{ needs.docker-checks.result }}" === "success" ? "‚úÖ passed" : "‚ùå failed";

            const comment = `## ü§ñ PR Checks Summary

            **Status**: ${status}

            ### Results:
            - **Backend Tests**: ${{ needs.backend-tests.result }}
            - **Frontend Tests**: ${{ needs.frontend-tests.result }}
            - **Security Checks**: ${{ needs.security-checks.result }}
            - **Docker Checks**: ${{ needs.docker-checks.result }}
            - **Pre-commit Checks**: ${{ needs.pre-commit-checks.result }}

            ${status === "‚úÖ passed" ?
              "All checks passed! üéâ This PR is ready for review." :
              "Some checks failed. Please review the logs and fix any issues."}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
